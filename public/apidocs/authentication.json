{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "http://foxsoftware.herokuapp.com/",
  "resourcePath": "authentication",
  "apis": [
    {
      "path": "auth/registration.json",
      "operations": [
        {
          "summary": "This part explain how authentication should be make",
          "notes": "        <h2>Registration overall</h2>\n        <p>\n          User can have access in two ways, by email+password registration and by oauth registration(facebook, google, linkedin), so\n          there are two endpoints for each way.\n        </p>\n\n        <h2>Authorization registered users</h2>\n        <h3>Token Header Format</h2>\n\n        <p>The authentication information should be included by the client in the headers or query params of <strong>EACH</strong> request. The headers follow the RFC 6750 Bearer Token format:</p>\n\n        <p>Authentication headers example:</p>\n        <pre><code class='ruby'>{\n          \"access-token\": \"wwwww\",\n          \"client\":       \"xxxxx\",\n          \"expiry\":       \"yyyyy\",\n          \"uid\":          \"zzzzz\"\n        }</code></pre>\n\n        <p>The authentication headers consists of the following params:</p>\n\n        <table><thead>\n          <tr>\n          <th>param</th>\n          <th>description</th>\n          </tr>\n          </thead><tbody>\n          <tr>\n          <td><strong><code>access-token</code></strong></td>\n          <td>This serves as the user's password for each request. A hashed version of this value is stored in the database for later comparison. This value should be changed on each request.</td>\n          </tr>\n          <tr>\n          <td><strong><code>client</code></strong></td>\n          <td>This enables the use of multiple simultaneous sessions on different clients. (For example, a user may want to be authenticated on both their phone and their laptop at the same time.)</td>\n          </tr>\n          <tr>\n          <td><strong><code>expiry</code></strong></td>\n          <td>The date at which the current session will expire. This can be used by clients to invalidate expired tokens without the need for an API request.</td>\n          </tr>\n          <tr>\n          <td><strong><code>uid</code></strong></td>\n          <td>A unique value that is used to identify the user. This is necessary because searching the DB for users by their access token will make the API susceptible to <a href=\"http://codahale.com/a-lesson-in-timing-attacks/\">timing attacks</a>.</td>\n          </tr>\n        </tbody></table>\n\n        <p>The authentication headers required for each request will be available in the response from the previous request. If you are using the <a href=\"https://github.com/lynndylanhurley/ng-token-auth\">ng-token-auth</a> AngularJS module or the <a href=\"https://github.com/lynndylanhurley/j-toker\">jToker</a> jQuery plugin, this functionality is already provided.</p>\n        <p>With every respond you will receive new authentication headers, you should use them</p>\n        <h3>Demo data to check json responses</h3>\n        <p>In local and staging environment we have demo data and demo shipper user with pre-filled authentication data everywhere so you can \"Try Out!\"</p>\n",
          "method": "get",
          "nickname": "Authentication#registration"
        }
      ]
    },
    {
      "path": "auth/confirmation.json",
      "operations": [
        {
          "summary": "Confirming user from email link",
          "parameters": [
            {
              "paramType": "query",
              "name": "confirmation_token",
              "type": "string",
              "description": "Confirmation token",
              "required": true
            },
            {
              "paramType": "query",
              "name": "config",
              "type": "string",
              "description": "Some config needed for API",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "code": "not_found",
              "responseModel": null,
              "message": "When we cant find that user"
            },
            {
              "code": "ok",
              "responseModel": null,
              "message": "UserObject"
            }
          ],
          "notes": "      <p>When user clicks confirmation link in his email, he lands on <strong>/auth/confirmation</strong> with few params:\n      <strong>confirmation_token</strong> and <strong>config</strong></p>\n      You have to pass two those to the same endpoint in the API.<br/>\n      <p>\n        When the user confirmed successfully you will also receive authentication headers, just like in login procedure(see above example)\n      </p>\n",
          "method": "get",
          "nickname": "Authentication#confirmation"
        }
      ]
    }
  ]
}